version: "3.9"
services:

  app-account-challenger:
    build:
      context: ./accounts
      dockerfile: Dockerfile
    restart: always
    environment:
      POSTGRES_HOST: postgres
      POSTGRES_USER: admin
      POSTGRES_PASSWORD: admin
      MONGO_HOST: mongo
      REDIS_HOST: redis
      KAFKA_HOST: kafka
      RABBITMQ_HOST: rabbitmq
      RABBITMQ_USER: admin
      RABBITMQ_PASSWORD: admin
      RABBITMQ_VHOST: vHostAppBase
      JAVA_TOOL_OPTIONS: -javaagent:./opentelemetry-javaagent.jar
      OTEL_SERVICE_NAME: your-service-name
      OTEL_TRACES_EXPORTER: otlp
      OTEL_METRICS_EXPORTER: otlp
      OTEL_LOGS_EXPORTER: otlp
      OTEL_EXPORTER_OTLP_ENDPOINT: http://otel-collector:4317
    ports:
      - "8080:8080"
    depends_on:
      - postgres
      - redis
      - zookeeper1
      - kafka
      - rabbitmq
    networks:
      - broker-kafka
  redis:
    image: "redis:alpine"
    ports:
      - 6379:6379
    networks:
      - broker-kafka
    environment:
      - REDIS_PASSWORD=redispassword
      - REDIS_USERNAME=redispassword
  zookeeper1:
    image: confluentinc/cp-zookeeper:7.5.1
    container_name: zookeeper1
    hostname: zookeeper1
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
      ZOOKEEPER_SERVER_ID: 1
      ZOOKEEPER_SERVERS: "zookeeper1:22888:23888"
    ports:
      - 2181:2181
    networks:
      - broker-kafka
  kafka:
    image: confluentinc/cp-kafka:7.5.1
    hostname: kafka
    restart: always
    depends_on:
      - zookeeper1
    ports:
      - 9093:9093
    environment:
      # KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper1:2181
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: INTERNAL:PLAINTEXT,OUTSIDE:PLAINTEXT
      KAFKA_LISTENERS: INTERNAL://:29092,OUTSIDE://:9093
      KAFKA_ADVERTISED_LISTENERS: INTERNAL://kafka:29092,OUTSIDE://kafka:9093 #to run in prd/hmg
      #      KAFKA_ADVERTISED_LISTENERS: INTERNAL://kafka:29092,OUTSIDE://localhost:9093 #to run local
      KAFKA_INTER_BROKER_LISTENER_NAME: INTERNAL
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      # KAFKA_LOG_DIRS: /var/lib/kafka/logs
    networks:
      - broker-kafka
  rabbitmq:
    image: "rabbitmq:3-management"
    environment:
      RABBITMQ_ERLANG_COOKIE: "SWQOKODSQALRPCLNMEQG"
      RABBITMQ_DEFAULT_USER: "admin"
      RABBITMQ_DEFAULT_PASS: "admin"
      RABBITMQ_DEFAULT_VHOST: "vHostAppBase"
    ports:
      - "15672:15672"
      - "5672:5672"
    networks:
      - broker-kafka
  postgres:
    image: postgres:16
    restart: always
    environment:
      POSTGRES_USER: admin
      POSTGRES_PASSWORD: admin
      POSTGRES_DB: app_account_challenger
    networks:
      - broker-kafka
    ports:
      - 5432:5432
    volumes:
      - ./postgres-data:/var/lib/postgresql/data
  mongo:
    image: mongo:latest
    environment:
      - MONGO_DATA_DIR=/data/db
      - MONGO_INITDB_DATABASE=mongodb
    #      - MONGO_INITDB_ROOT_USERNAME=admin
    #      - MONGO_INITDB_ROOT_PASSWORD=admin
    ports:
      - 27017:27017
    networks:
      - broker-kafka

  otel-collector:
    image: otel/opentelemetry-collector-contrib:0.82.0
    restart: always
    command:
      - --config=/etc/otelcol-contrib/otel-collector.yml
    volumes:
      - ./docker/collector/otel-collector.yml:/etc/otelcol-contrib/otel-collector.yml
    ports:
      - "1888:1888" # pprof extension
      - "8888:8888" # Prometheus metrics exposed by the collector
      - "8889:8889" # Prometheus exporter metrics
      - "13133:13133" # health_check extension
      - "4317:4317" # OTLP gRPC receiver
      - "4318:4318" # OTLP http receiver
      - "55679:55679" # zpages extension
    depends_on:
      - jaeger
    networks:
      - broker-kafka
  prometheus:
    container_name: prometheus
    image: prom/prometheus
    restart: always
    command:
      - --config.file=/etc/prometheus/prometheus.yml
    volumes:
      - ./docker/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
    ports:
      - "9090:9090"
    networks:
      - broker-kafka
  loki:
    image: grafana/loki:latest
    command: -config.file=/etc/loki/local-config.yaml
    ports:
      - "3100:3100"
    networks:
      - broker-kafka
  tempo:
    image: grafana/tempo:latest
    command: [ "-config.file=/etc/tempo.yml" ]
    volumes:
      - ./docker/tempo/tempo.yml:/etc/tempo.yml
    ports:
      - "3200:3200"   # tempo
      - "4317"  # otlp grpc
    networks:
      - broker-kafka
  grafana:
    container_name: grafana
    image: grafana/grafana
    volumes:
      - ./docker/grafana/grafana-datasources.yml:/etc/grafana/provisioning/datasources/datasources.yml
    ports:
      - "3000:3000"
    networks:
      - broker-kafka
  jaeger:
    image: jaegertracing/all-in-one:latest
    restart: always
    environment:
      - COLLECTOR_OLTP_ENABLED=true
    ports:
      - "16686:16686"
      - "14268"
      - "14250"
    networks:
      - broker-kafka
networks:
  broker-kafka:
    driver: bridge